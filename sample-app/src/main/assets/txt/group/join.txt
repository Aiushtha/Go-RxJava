class User {
 public String name;
 public String getName() {return name;}
 public User setName(String name) {this.name = name;return this;}
}

final List<User> houses = new ArrayList<User>();
houses.add(new User().setName("1"));
houses.add(new User().setName("2"));
houses.add(new User().setName("3"));
Observable<User> houseSequence =
Observable.interval(1, TimeUnit.SECONDS).map(new Func1<Long, User>() {
 @Override
 public User call(Long position) {
 return houses.get(position.intValue());
 }
}).take(houses.size());

Observable<Long> tictoc = Observable.interval(2, TimeUnit.SECONDS);
houseSequence.join(tictoc, new Func1<User, Observable<Long>>() {
 @Override
 public Observable<Long> call(User house) {
 println("action1---");
 house.setName(house.getName()+" count:");
 return Observable.timer(3, TimeUnit.SECONDS);
 }
},
new Func1<Long, Observable<Long>>() {
 @Override
 public Observable<Long> call(Long aLong) {
  return Observable.timer(3, TimeUnit.SECONDS);
 }
},
new Func2<User, Long, String>() {
 @Override
 public String call(User house, Long aLong) {
  house.setName(house.getName()+"★");
  return "第"+aLong+"次" + "-->" + house.getName();
 }
})
.subscribe(new Observer<String>() {
 @Override
 public void onCompleted() {
  println("onCompleted");
 }
 @Override
 public void onError(Throwable e) {
  println("Error:" + e.getMessage());
 }
 @Override
 public void onNext(String s) {
  println(s);
 }
});